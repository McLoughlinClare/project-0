"use strict";function init(){$("#successMessage").hide(),$("#successMessage").css({left:"580px",top:"250px",width:0,height:0}),shuffledNumbers=shuffleArray(numbers),console.log(slots),console.log(numbers),cardSlotAssign(),cardAssign()}function shuffleArray(s){var e=s.slice(0);return e.sort(function(){return Math.random()-.5}),e}function cardSlotAssign(){for(var s=0;s<slots.length;s++)$("<div />",{text:slots[s],"data-position":s+1}).appendTo("#cardSlots").droppable({accept:"#cardPile div",hoverClass:"hovered",drop:handleCardDrop})}function cardAssign(){for(var s=0;s<shuffledNumbers.length;s++)$("<div />",{text:shuffledNumbers[s],"data-position":numbers.indexOf(shuffledNumbers[s])+1}).attr("id","card"+s).appendTo("#cardPile").draggable({containment:"#content",stack:"#cardPile div",cursor:"move",revert:!0})}function handleCardDrop(s,e){var r=$(this).data("position"),t=e.draggable.data("position");if(console.log(r,t),r===t&&(e.draggable.addClass("correct"),e.draggable.draggable("disable"),$(this).droppable("disable"),e.draggable.position({of:$(this),my:"left top",at:"left top"}),e.draggable.draggable("option","revert",!1),correctCards++),8===correctCards)for(var a=1;a<3;a++)slots=slotDeck[a],numbers=numbersDeck[a],init()}console.log("JS loaded");var correctCards=0,numbers2=["Proton","Neutron","Positron","π+","π-","K+","K-","π⁰"],numbers3=["Gravitational","Gravitational1","weak","weak1","EM","EM1","Strong","Strong1"],numbers1=["Proton","Neutron","Electron","Positron","Pion+","Kaon+","kaon-","Pion"],slots2=["uud","udd","‾u","u-d","-ud","-ud","-du","u-u"],slots3=["affects all particles with mass","infinite range","affects all particles","responsable for beta decay","affects all particles with charge","infinite range","affects hadrons","very short range"],slots1=["p","n","e","p-","π+","K+","K-","π⁰"],shuffledNumbers=[],numbersDeck=[numbers1,numbers2,numbers3],slotDeck=[slots1,slots2,slots3],slots=slots1,numbers=numbers1;$(init),correctCards=0,$("#cardPile").html("");
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyIkIiwiaW5pdCIsImhpZGUiLCJjc3MiLCJsZWZ0IiwidG9wIiwic2h1ZmZsZWROdW1iZXJzIiwic2h1ZmZsZUFycmF5IiwibnVtYmVycyIsImNvbnNvbGUiLCJsb2ciLCJzbG90cyIsImFycmF5IiwibmV3QXJyYXkiLCJzbGljZSIsInNvcnQiLCJNYXRoIiwicmFuZG9tIiwiZHJvcCIsImkiLCJsZW5ndGgiLCJ0ZXh0IiwiZGF0YS1wb3NpdGlvbiIsImFwcGVuZFRvIiwiZHJvcHBhYmxlIiwiYWNjZXB0IiwiaG92ZXJDbGFzcyIsImNhcmRBc3NpZ24iLCJyZXZlcnQiLCJpbmRleE9mIiwiYXR0ciIsImRyYWdnYWJsZSIsImNvbnRhaW5tZW50Iiwic3RhY2siLCJoYW5kbGVDYXJkRHJvcCIsImN1cnNvciIsInNsb3ROdW1iZXIiLCJldmVudCIsInVpIiwiY2FyZE51bWJlciIsImFkZENsYXNzIiwiZGF0YSIsInRoaXMiLCJjb3JyZWN0Q2FyZHMiLCJvZiIsIm15IiwiYXQiLCJqIiwic2xvdERlY2siLCJudW1iZXJzRGVjayIsIm51bWJlcnMzIiwibnVtYmVyczIiLCJudW1iZXJzMSIsInNsb3RzMyIsInNsb3RzMiIsInNsb3RzMSJdLCJtYXBwaW5ncyI6IllBa0JBQSxTQUFBQyxRQUVBRCxFQUFBLG1CQUFnQkUsT0FDZEYsRUFBQSxtQkFBQUcsS0FDRUMsS0FBQSxRQUNBQyxJQUFBLFFBQ0FELE1BQU0sRUFDTkMsT0FBSyxJQUZtQkMsZ0JBQTFCQyxhQUFBQyxTQU1BQyxRQUFBQyxJQUFBQyxPQUNBTCxRQUFBQSxJQUFBQSxTQUNBRyxpQkFDQUEsYUFzQkMsUUFGREYsY0FBQUssR0FJRCxHQUFBQyxHQUFBRCxFQUFBRSxNQUFBLEVBSUMsT0FSQUQsR0FBU0UsS0FBTSxXQU1qQixNQUFBQyxNQUFBQyxTQUFBLEtBRVFKLEVBS0ZLLFFBQUFBLGtCQUhVLElBRFosR0FBQUMsR0FBQSxFQUFBQSxFQUFBUixNQUFBUyxPQUFBRCxJQU1EbkIsRUFBQSxXQUFBcUIsS0FBQVYsTUFBQVEsR0FBQUcsZ0JBQUFILEVBQUEsSUFBQUksU0FBQSxjQUNGQyxXQUxLQyxPQUFRLGdCQVFkQyxXQUFBLFVBQ0FSLEtBQVNTLGlCQU9IQyxRQUFBQSxjQUVILElBQUEsR0FBQVQsR0FBQSxFQUFBQSxFQUFBYixnQkFBQWMsT0FBQUQsSUFDRm5CLEVBQUEsV0FBQXFCLEtBQUFmLGdCQUFBYSxHQUFBRyxnQkFBQWQsUUFBQXFCLFFBQUF2QixnQkFBQWEsSUFBQSxJQUFBVyxLQUFBLEtBQUEsT0FBQVgsR0FBQUksU0FBQSxhQUFBUSxXQUNEQyxZQUFBLFdBQ0FDLE1BQVNDLGdCQU5IQyxPQUFRLE9BUVJDLFFBQUFBLElBS0osUUFBQUYsZ0JBQUFHLEVBQUFDLEdBRUEsR0FBS0YsR0FBQUEsRUFBZUcsTUFBQUEsS0FBcEIsWUFDRUQsRUFBYUUsRUFBQUEsVUFBVUMsS0FBdkIsV0FpQkEsSUFoQkFILFFBQUdQLElBQUFBLEVBQUhRLEdBS0RILElBQUFHLElBTkNELEVBQUdQLFVBQVVTLFNBQVUsV0FRekJGLEVBQUFQLFVBQUFBLFVBQUEsV0FDQS9CLEVBQUEwQyxNQUFBbEIsVUFBQSxXQUNBYyxFQUFLSyxVQUFBQSxVQUFxQkMsR0FBQTVDLEVBQUEwQyxNQUFBRyxHQUFBLFdBQUFDLEdBQUEsYUFDeEJSLEVBQUFQLFVBQUFBLFVBQUEsU0FBQSxVQUFBLEdBQ0FZLGdCQUtBLElBQUFBLGFBYUgsSUFBQSxHQUFBSSxHQUFBLEVBQUFBLEVBQUEsRUFBQUEsSUFWS3BDLE1BQVFxQyxTQUFTRCxHQUNqQnZDLFFBQVV5QyxZQUFZRixHQUV0QjlDLE9BckhOUSxRQUFRQyxJQUFJLFlBQVpELElBQUFBLGNBQVksRUFFUmtDLFVBQUFBLFNBQUosVUFBQSxXQUFBLEtBQUEsS0FBQSxLQUFBLEtBQUEsTUFHTU8sVUFBVyxnQkFBaUIsaUJBQWtCLE9BQVEsUUFBUyxLQUFNLE1BQU8sU0FBVSxXQUR0RkMsVUFBWSxTQUFVLFVBQVcsV0FBWSxXQUFVLFFBQTVDLFFBQTRELFFBQUssUUFFOUVDLFFBQVcsTUFBQyxNQUFVLEtBQVcsTUFBQSxNQUFZLE1BQUEsTUFBWSxPQUd2REMsUUFBVSxrQ0FBbUMsaUJBQWtCLHdCQUF5Qiw2QkFBOEIsb0NBQXFDLGlCQUFrQixrQkFBbUIsb0JBRGhNQyxRQUFTLElBQUQsSUFBUSxJQUFNLEtBQUEsS0FBZCxLQUErQixLQUFNLE1BRS9DQyxtQkFHRU4sYUFBZUcsU0FBVUQsU0FBVUQsVUFEckM1QyxVQUFBQSxPQUFKZ0QsT0FBQUQsUUFDTUosTUFBQUEsT0FDQUQsUUFBQUEsUUFFTmhELEdBQUFDLE1BMkJBMEMsYUFBZSxFQU1mM0MsRUFBQSxhQUFTTyxLQUFUIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnNvbGUubG9nKCdKUyBsb2FkZWQnKTtcblxubGV0IGNvcnJlY3RDYXJkcyA9IDA7XG5cbmNvbnN0IG51bWJlcnMyID0gWydQcm90b24nLCAnTmV1dHJvbicsICdQb3NpdHJvbicsICdcXHUwM0MwKycsJ1xcdTAzQzAtJywgJ0srJywnSy0nLCdcXHUwM0MwXFx1MjA3MCddO1xuY29uc3QgbnVtYmVyczMgPVsnR3Jhdml0YXRpb25hbCcsICdHcmF2aXRhdGlvbmFsMScsICd3ZWFrJywgJ3dlYWsxJywgJ0VNJywgJ0VNMScsICdTdHJvbmcnLCAnU3Ryb25nMSddO1xubGV0IG51bWJlcnMxID0gWydQcm90b24nLCAnTmV1dHJvbicsICdFbGVjdHJvbicsICdQb3NpdHJvbicsICdQaW9uKycsICdLYW9uKycsICdrYW9uLScsICdQaW9uJ107XG5cbmNvbnN0IHNsb3RzMj0gWyd1dWQnLCAndWRkJywnXFx1MjAzRXUnLCd1LWQnLCAnLXVkJywnLXVkJywgJy1kdScsICd1LXUnXTtcbmNvbnN0IHNsb3RzMyA9IFsnYWZmZWN0cyBhbGwgcGFydGljbGVzIHdpdGggbWFzcycsICdpbmZpbml0ZSByYW5nZScsICdhZmZlY3RzIGFsbCBwYXJ0aWNsZXMnLCAncmVzcG9uc2FibGUgZm9yIGJldGEgZGVjYXknLCAnYWZmZWN0cyBhbGwgcGFydGljbGVzIHdpdGggY2hhcmdlJywgJ2luZmluaXRlIHJhbmdlJywgJ2FmZmVjdHMgaGFkcm9ucycsICd2ZXJ5IHNob3J0IHJhbmdlJ107XG5sZXQgc2xvdHMxID0gWydwJywgJ24nLCdlJywgJ3AtJywnXFx1MDNDMCsnLCAnSysnLCdLLScsJ1xcdTAzQzBcXHUyMDcwJ107XG5cbmxldCBzaHVmZmxlZE51bWJlcnM9IFtdO1xuY29uc3QgbnVtYmVyc0RlY2sgPSBbbnVtYmVyczEsIG51bWJlcnMyLCBudW1iZXJzM107XG5jb25zdCBzbG90RGVjayA9IFtzbG90czEsIHNsb3RzMiwgc2xvdHMzXTtcbmxldCBzbG90cyA9c2xvdHMxO1xubGV0IG51bWJlcnMgPSBudW1iZXJzMTtcblxuJCggaW5pdCApO1xuXG5mdW5jdGlvbiBpbml0KCkge1xuICAvLyBIaWRlIHRoZSBzdWNjZXNzIG1lc3NhZ2VcbiAgJCgnI3N1Y2Nlc3NNZXNzYWdlJykuaGlkZSgpO1xuICAkKCcjc3VjY2Vzc01lc3NhZ2UnKS5jc3MoIHtcbiAgICBsZWZ0OiAnNTgwcHgnLFxuICAgIHRvcDogJzI1MHB4JyxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDBcbiAgfSApO1xuICAvL3Nob3cgb25seSBvbmUgcGFpciBvZiBhcnJheXMgYXQgYSB0aW1lXG4gIHNodWZmbGVkTnVtYmVycyA9IHNodWZmbGVBcnJheShudW1iZXJzKTtcbiAgY29uc29sZS5sb2coc2xvdHMpO1xuICBjb25zb2xlLmxvZyhudW1iZXJzKTtcbiAgY2FyZFNsb3RBc3NpZ24oKTtcbiAgY2FyZEFzc2lnbigpO1xufVxuXG5cblxuXG5cbi8vIFJlc2V0IHRoZSBnYW1lXG5cbmNvcnJlY3RDYXJkcyA9IDA7XG4kKCcjY2FyZFBpbGUnKS5odG1sKCAnJyApO1xuXG5cblxuXG5mdW5jdGlvbiBzaHVmZmxlQXJyYXkoYXJyYXkpIHtcbiAgLy8gZmlzaGVyLXlhdGVzIHNodWZmbGVcbiAgY29uc3QgbmV3QXJyYXkgPSBhcnJheS5zbGljZSgwKTtcbiAgbmV3QXJyYXkuc29ydCggZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgLSAwLjU7XG4gIH0pO1xuICByZXR1cm4gbmV3QXJyYXk7XG59XG5cbi8vIENyZWF0ZSB0aGUgY2FyZCBzbG90c1xuZnVuY3Rpb24gY2FyZFNsb3RBc3NpZ24oKSB7XG4gIGZvciAoIGxldCBpPTA7IGk8c2xvdHMubGVuZ3RoOyBpKysgKSB7XG4gICAgJCgnPGRpdiAvPicsIHsgdGV4dDogc2xvdHNbaV0sICdkYXRhLXBvc2l0aW9uJzogaSArIDEgfSkuYXBwZW5kVG8oJyNjYXJkU2xvdHMnKVxuICAgIC5kcm9wcGFibGUoIHtcbiAgICAgIGFjY2VwdDogJyNjYXJkUGlsZSBkaXYnLFxuICAgICAgaG92ZXJDbGFzczogJ2hvdmVyZWQnLFxuICAgICAgZHJvcDogaGFuZGxlQ2FyZERyb3BcbiAgICB9ICk7XG4gIH1cbn1cblxuXG4vLyBDcmVhdGUgdGhlIHBpbGUgb2Ygc2h1ZmZsZWQgY2FyZHNcbmZ1bmN0aW9uIGNhcmRBc3NpZ24oKXtcblxuICBmb3IgKCBsZXQgaT0wOyBpPHNodWZmbGVkTnVtYmVycy5sZW5ndGg7IGkrKyApIHtcbiAgICAkKCc8ZGl2IC8+JywgeyB0ZXh0OiBzaHVmZmxlZE51bWJlcnNbaV0sICdkYXRhLXBvc2l0aW9uJzogbnVtYmVycy5pbmRleE9mKHNodWZmbGVkTnVtYmVyc1tpXSkgKyAxIH0pLmF0dHIoICdpZCcsICdjYXJkJytpICkuYXBwZW5kVG8oICcjY2FyZFBpbGUnICkuZHJhZ2dhYmxlKCB7XG4gICAgICBjb250YWlubWVudDogJyNjb250ZW50JyxcbiAgICAgIHN0YWNrOiAnI2NhcmRQaWxlIGRpdicsXG4gICAgICBjdXJzb3I6ICdtb3ZlJyxcbiAgICAgIHJldmVydDogdHJ1ZVxuICAgIH0gKTtcbiAgfVxufVxuLy9kcmFnZ2luZyB0aGUgY2FyZHMgdG8gdGhlIHJpZ2h0IHNsb3QuXG5mdW5jdGlvbiBoYW5kbGVDYXJkRHJvcCggZXZlbnQsIHVpICkge1xuXG4gIHZhciBzbG90TnVtYmVyID0gJCh0aGlzKS5kYXRhKCdwb3NpdGlvbicpO1xuICB2YXIgY2FyZE51bWJlciA9IHVpLmRyYWdnYWJsZS5kYXRhKCdwb3NpdGlvbicpO1xuICBjb25zb2xlLmxvZyhzbG90TnVtYmVyLCBjYXJkTnVtYmVyKTtcbiAgLy8gSWYgdGhlIGNhcmQgd2FzIGRyb3BwZWQgdG8gdGhlIGNvcnJlY3Qgc2xvdCxcbiAgLy8gY2hhbmdlIHRoZSBjYXJkIGNvbG91ciwgcG9zaXRpb24gaXQgZGlyZWN0bHlcbiAgLy8gb24gdG9wIG9mIHRoZSBzbG90LCBhbmQgcHJldmVudCBpdCBiZWluZyBkcmFnZ2VkXG4gIC8vIGFnYWluXG4gIGlmICggc2xvdE51bWJlciA9PT0gY2FyZE51bWJlciApIHtcbiAgICB1aS5kcmFnZ2FibGUuYWRkQ2xhc3MoICdjb3JyZWN0JyApO1xuICAgIHVpLmRyYWdnYWJsZS5kcmFnZ2FibGUoICdkaXNhYmxlJyApO1xuICAgICQodGhpcykuZHJvcHBhYmxlKCAnZGlzYWJsZScgKTtcbiAgICB1aS5kcmFnZ2FibGUucG9zaXRpb24oIHsgb2Y6ICQodGhpcyksIG15OiAnbGVmdCB0b3AnLCBhdDogJ2xlZnQgdG9wJyB9ICk7XG4gICAgdWkuZHJhZ2dhYmxlLmRyYWdnYWJsZSggJ29wdGlvbicsICdyZXZlcnQnLCBmYWxzZSApO1xuICAgIGNvcnJlY3RDYXJkcysrO1xuICB9XG5cbiAgLy8gSWYgYWxsIHRoZSBjYXJkcyBoYXZlIGJlZW4gcGxhY2VkIGNvcnJlY3RseSB0aGVuIGRpc3BsYXkgYSBtZXNzYWdlXG4gIC8vIGFuZCByZXNldCB0aGUgY2FyZHMgZm9yIGFub3RoZXIgZ29cbiAgaWYgKCBjb3JyZWN0Q2FyZHMgPT09IDggKSB7XG4gICAgLy8gJCgnI3N1Y2Nlc3NNZXNzYWdlJykuc2hvdygpO1xuICAgIC8vICQoJyNzdWNjZXNzTWVzc2FnZScpLmFuaW1hdGUoIHtcbiAgICAvLyAgIGxlZnQ6ICczODBweCcsXG4gICAgLy8gICB0b3A6ICcyMDBweCcsXG4gICAgLy8gICB3aWR0aDogJzQwMHB4JyxcbiAgICAvLyAgIGhlaWdodDogJzEwMHB4JyxcbiAgICAvLyAgIG9wYWNpdHk6IDFcbiAgICAvLyB9ICk7XG4gICAgZm9yIChsZXQgaj0xOyBqPDM7IGorKyl7XG4gICAgICBzbG90cyA9IHNsb3REZWNrW2pdO1xuICAgICAgbnVtYmVycyA9IG51bWJlcnNEZWNrW2pdO1xuXG4gICAgICBpbml0KCk7XG5cblxuXG5cbiAgICB9XG4gIH1cbn1cbiJdfQ==
