"use strict";console.log("JS loaded"),$(function(){function e(){B=o(K),t(D),a(K)}function o(e){var o=e.slice(0);return o.sort(function(){return Math.random()-.5}),o}function t(e){for(var o=0;o<e.length;o++)$("<div />",{text:e[o],"data-position":o+1}).appendTo("#cardSlots").droppable({accept:"#cardPile div",hoverClass:"hovered",drop:n})}function a(e){for(var o=0;o<B.length;o++)$("<div />",{text:B[o],"data-position":e.indexOf(B[o])+1}).attr("id","card"+o).appendTo("#cardPile").draggable({containment:"#levelOne",stack:"#cardPile div",cursor:"move",revert:!0})}function n(o,t){var a=$(this).data("position"),n=t.draggable.data("position");console.log(a,n),a===n&&(t.draggable.addClass("correct"),t.draggable.draggable("disable"),$(this).droppable("disable"),t.draggable.position({of:$(this),my:"left top",at:"left top"}),t.draggable.draggable("option","revert",!1),P++,console.log(P)),8===P&&1===q?(D=M,K=y,q++,v.html(""),f.html(""),e()):16===P&&2===q?(D=L,K=C,q++,v.html(""),f.html(""),e()):24===P&&3===q&&(x=(new Date).getTime(),N=Math.round((100-(x-W)/1e3)/10),console.log(N),g.show(),p.hide(),console.log("leveltworevealed"),A=(new Date).getTime(),r())}function r(){console.log("levelTwoPlay"),console.log(m),m.draggable({containment:"levelTwo",revert:!0}),w.droppable({accept:".mesons",drop:s}),k.droppable({accept:".baryons",drop:s}),T.droppable({accept:".leptons",drop:s})}function s(e,o){$(this).data("position")===o.draggable.data("position")&&(o.draggable.draggable("option","revert",!1),10==++F&&(Q=(new Date).getTime(),E=Math.round((100-(Q-A)/1e3)/10),console.log(E),console.log("Level Three"),h.show(500),g.hide(),i(),l()))}function i(){console.log("start of level 3");var e=J[z].question,o=J[z].options[0],t=J[z].options[1],a=J[z].options[2];j=J[z].answer,$("div.questions").html(e),$("button.a").html(o),$("button.b").html(t),$("button.c").html(a)}function l(){$(".roundThree button").click(function(e){if($(e.target).attr("class")===j&&U++,z<=3)z++,i();else{console.log("results"),$("div.feedbackOne p").html(N);var o="average";N>4&&(o="good"),N<3&&(o="bad"),$(".feedbackOne").addClass(o),$("div.feedbackTwo p").html(E);var t="average";E>6&&(t="good"),E<5&&(t="bad"),$(".feedbackTwo").addClass(t),$("div.feedbackThree p").html(U);var a="average";U>4&&(a="good"),U<3&&(a="bad"),$(".feedbackThree").addClass(a),h.hide(),$("#studentFeedback").show(),N+U+E>13?$("#superstar").show():N<(E&&U)?$("#improveSymbols").show():E<(N&&U)?$("#improveClassification").show():U<(E&&N)&&$("#basicConcepts").show()}})}var c=$(".start-button"),d=$(".skip-button"),u=$("#welcome"),p=$("#levelOne"),g=$("#levelTwo"),h=$("#levelThree"),b=$(".fullscreen-bg"),v=$("#cardPile"),f=$("#cardSlots"),m=$(".unclassifiedParticle"),w=$("#mesons"),k=$("#baryons"),T=$("#lepton"),P=0,q=1,y=["Proton","Neutron","k⁰","π+","π-","K+","K-","π⁰"],C=["Q","B","S","γ","b","ν","L","e⁰ "],S=["Proton","Neutron","Electron","Positron","tau","Kaon+","Muon","Pion"],M=["uud","udd","ds̄","ūd","d̄u","us̄","ūs","uū"],L=["Charge","Baryon number","Strangeness","photon","Bottom Quark","neutrino","Lepton number","positron"],O=["p","n","e","p̄","τ","K+","μ","π⁰"],B=[],D=O,K=S,W="",x="",N="",A="",Q="",E="",F=0,J=[{answer:"a answer-button",question:"the creation of a particle and its anti-particle when a gamma ray photon passes close to a nucleus.",options:["Pair Production","Pair Annihilation","Anti-matter"]},{answer:"c answer-button",question:"What is the charm quark's anti quark?",options:["Up","Top","Strange"]},{answer:"c answer-button",question:"Which particle type consists of quark-antiquark pairs?",options:["Baryon","Lepton","Meson"]},{answer:"a answer-button",question:"When is strangeness not conserved?",options:["weak interaction","electromagnetic force","gravitational force"]},{answer:"b answer-button",question:"Which of the following is not a Lepton?",options:["Muon","Neutron","Tau"]}],U=0,j="",z=0;c.click(function(){e(),console.log("welcome clicked!"),u.hide(10),b.hide(10),p.show(50),W=(new Date).getTime(),console.log(W)}),d.click(function(){g.show(),g.animate({opacity:1}),r()}),v.html("")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
